---
# yaml-language-server: $schema=https://storage.googleapis.com/coderabbit_public_assets/schema.v2.json

language: en-US
tone_instructions: "Focus on Go 1.24 best practices and modern Go idioms"
early_access: false
enable_free_tier: true
reviews:
  profile: assertive
  request_changes_workflow: true
  high_level_summary: true
  high_level_summary_placeholder: "@coderabbitai summary"
  high_level_summary_in_walkthrough: false
  auto_title_placeholder: "@coderabbitai"
  auto_title_instructions: ""
  review_status: true
  commit_status: true
  fail_commit_status: true
  collapse_walkthrough: false
  changed_files_summary: true
  sequence_diagrams: true
  estimate_code_review_effort: true
  assess_linked_issues: true
  related_issues: true
  related_prs: true
  suggested_labels: true
  auto_apply_labels: false
  suggested_reviewers: true
  auto_assign_reviewers: false
  poem: false
  labeling_instructions: []
  path_filters:
    - '!**/vendor/**'
    - '!**/node_modules/**'
    - '!**/dist/**'
    - '!**/build/**'
    - '!**/.git/**'
  path_instructions:
    - path: "**/*.go"
      instructions: |
        Please ensure this Go code is compatible with Go 1.24.
        Consider using the latest Go features and best practices.
        Pay special attention to:
        - Error handling with proper error wrapping
        - Use of generics where appropriate
        - Modern Go idioms and patterns
        - Performance optimizations available in Go 1.24
        - Proper documentation for exported functions and types
        - Security vulnerabilities and best practices
    - path: "**/*_test.go"
      instructions: |
        Please ensure adequate test coverage for new functionality.
        Consider adding integration tests for complex logic.
        Use Go 1.24 testing features where appropriate.
        - Ensure tests cover edge cases and error conditions
        - Check for proper use of testing utilities and patterns
        - Verify test isolation and cleanup
    - path: "**/Makefile"
      instructions: |
        - Review Makefile for proper targets and dependencies
        - Ensure commands are properly formatted and safe
        - Check for proper variable usage
    - path: "**/*.md"
      instructions: |
        Please ensure documentation is clear and up-to-date.
        Consider adding examples for new features.
        Use proper markdown formatting.
        - Check for broken links and proper documentation structure
        - Ensure examples are accurate and up-to-date
    - path: "go.mod"
      instructions: |
        Please review Go module dependencies for:
        - Security vulnerabilities
        - Compatibility with Go 1.24
        - Latest stable versions
        - Proper module structure
  abort_on_close: true
  disable_cache: false
  auto_review:
    enabled: true
    auto_incremental_review: true
    ignore_title_keywords:
      - WIP
      - draft
      - "[skip ci]"
    labels: []
    drafts: false
    base_branches:
      - main
      - develop
  finishing_touches:
    docstrings:
      enabled: true
    unit_tests:
      enabled: true
  tools:
    ast-grep:
      rule_dirs: []
      util_dirs: []
      essential_rules: true
      packages: []
    shellcheck:
      enabled: true
    ruff:
      enabled: false
    markdownlint:
      enabled: true
    github-checks:
      enabled: true
      timeout_ms: 90000
    languagetool:
      enabled: true
      enabled_rules: []
      disabled_rules: []
      enabled_categories: []
      disabled_categories: []
      enabled_only: false
      level: default
    biome:
      enabled: false
    hadolint:
      enabled: true
    swiftlint:
      enabled: false
      config_file: ""
    phpstan:
      enabled: false
      level: default
    golangci-lint:
      enabled: true
      config_file: ".golangci.yml"
    yamllint:
      enabled: true
    gitleaks:
      enabled: true
    checkov:
      enabled: false
    detekt:
      enabled: false
      config_file: ""
    eslint:
      enabled: false
    flake8:
      enabled: false
    rubocop:
      enabled: false
    buf:
      enabled: false
    regal:
      enabled: false
    actionlint:
      enabled: true
    pmd:
      enabled: false
      config_file: ""
    phpmd:
      enabled: false
    phpcs:
      enabled: false
    cppcheck:
      enabled: false
    semgrep:
      enabled: true
      config_file: ""
    circleci:
      enabled: false
    clippy:
      enabled: false
    sqlfluff:
      enabled: false
    prismaLint:
      enabled: false
    pylint:
      enabled: false
    oxc:
      enabled: false
    shopifyThemeCheck:
      enabled: false
    luacheck:
      enabled: false
    brakeman:
      enabled: false
    dotenvLint:
      enabled: true
    htmlhint:
      enabled: false
    checkmake:
      enabled: true
    osvScanner:
      enabled: true
chat:
  auto_reply: true
  integrations:
    jira:
      usage: auto
    linear:
      usage: auto
knowledge_base:
  opt_out: false
  web_search:
    enabled: true
  code_guidelines:
    enabled: true
    filePatterns:
      - "**/.cursorrules"
      - "**/CLAUDE.md"
      - "**/GEMINI.md"
      - "**/.cursor/rules/*"
      - "**/.windsurfrules"
      - "**/.clinerules/*"
      - "**/.rules/*"
      - "**/AGENT.md"
  learnings:
    scope: auto
  issues:
    scope: auto
  jira:
    usage: auto
    project_keys: []
  linear:
    usage: auto
    team_keys: []
  pull_requests:
    scope: auto
code_generation:
  docstrings:
    language: en-US
    path_instructions:
      - path: "**/*.go"
        instructions: |
          Generate Go docstrings following Go conventions:
          - Start with the function/type name
          - Use complete sentences
          - Include parameter descriptions for complex functions
          - Document return values and error conditions
          - Follow godoc formatting standards
  unit_tests:
    path_instructions:
      - path: "**/*.go"
        instructions: |
          Generate comprehensive Go unit tests:
          - Use the testing package and testify for assertions
          - Test both success and error paths
          - Include edge cases and boundary conditions
          - Use table-driven tests where appropriate
          - Ensure proper test isolation and cleanup
          - Mock external dependencies appropriately
